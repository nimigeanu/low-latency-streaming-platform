Description: OvenMediaEngine based low-latency streaming server with RTMP ingress and WebRTC, LL-DASH egress

Parameters:
  
  InstanceType:
    Description: Instance type of the server
    Type: String
    Default: t3.micro
    AllowedValues: [t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge]
  
Mappings: 
  AmiByRegion: 
    ap-east-1: 
      "ami": "ami-d26218a3"
    ap-northeast-1: 
      "ami": "ami-0d5db3e2a1b98ca94"
    ap-south-1: 
      "ami": "ami-0237472cf337d9529"
    ap-southeast-1: 
      "ami": "ami-0c199cae95cea87f0"
    ca-central-1: 
      "ami": "ami-0dbe45195223e250b"
    eu-central-1: 
      "ami": "ami-040a1551f9c9d11ad"
    eu-north-1: 
      "ami": "ami-0567220a328fe4fee"
    eu-west-1: 
      "ami": "ami-0e41581acd7dedd99"
    me-south-1: 
      "ami": "ami-0a7794ed517908686"
    sa-east-1: 
      "ami": "ami-0065a65613972a22a"
    us-east-1: 
      "ami": "ami-0d5ae5525eb033d0a"
    us-west-1: 
      "ami": "ami-00a3e4424e9ab3e56"
    cn-north-1: 
      "ami": "ami-01993b4213b4bffb5"
    cn-northwest-1: 
      "ami": "ami-01d4e30d4d4952d0f"
    us-gov-west-1: 
      "ami": "ami-a76736c6"
    us-gov-east-1: 
      "ami": "ami-64a84b15"
    ap-northeast-2: 
      "ami": "ami-0f4362c71ffaf7759"
    ap-southeast-2: 
      "ami": "ami-0c0483bc96aef8b2f"
    eu-west-2: 
      "ami": "ami-00f94dc949fea2adf"
    us-east-2: 
      "ami": "ami-0a7f2b5b6b87eaa1b"
    us-west-2: 
      "ami": "ami-09c6723c6c24250c9"
    ap-northeast-3: 
      "ami": "ami-07672d9af3947230d"
    eu-west-3: 
      "ami": "ami-0df03c7641cf41947"  

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.132.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
   
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.132.10.0/24
      MapPublicIpOnLaunch : true
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value:  !Sub ${AWS::StackName}-Public
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway  

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows ssh, rtmp and http/s connections to host
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 9000
        ToPort: 9000
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 1935
        ToPort: 1935
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3478
        ToPort: 3478
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3333
        ToPort: 3333
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 4000
        ToPort: 4005
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 10006
        ToPort: 10010
        CidrIp: 0.0.0.0/0

  Server:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [AmiByRegion, !Ref "AWS::Region", "ami"]
      InstanceType: !Ref InstanceType
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SecurityGroup
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash -x
          apt-get update
          apt -y install docker.io
          systemctl start docker
          systemctl enable docker
          docker run -d \
            -p 1935:1935 -p 4000-4005:4000-4005/udp -p 3333:3333 -p 3478:3478 -p 8080:8080 -p 9000:9000 -p 9999:9999/udp -p 10006-10010:10006-10010/udp \
            airensoft/ovenmediaengine:0.12.1
      Tags: 
        - 
          Key: "Name"
          Value: !Sub "${AWS::StackName}-Server"

Outputs:
  IngressEndpoint:
    Description: RTMP URL to publish to
    Value: !Sub 
      - rtmp://${publicIp}:1935/app/stream1
      - { publicIp: !GetAtt Server.PublicIp }
  LLHLSEgressEndpoint:
    Description: LL-HLS URL for playback
    Value: !Sub 
      - http://${publicIp}:8080/app/stream1/manifest_ll.mpd
      - { publicIp: !GetAtt Server.PublicIp }
  WebRTCEgressEndpoint:
    Description: WebRTC URL for playback
    Value: !Sub 
      - ws://${publicIp}:3333/app/stream1
      - { publicIp: !GetAtt Server.PublicIp }
  LLHLSDemoPlayerUrl:
    Description: LL-HLS Demo Player URL
    Value: !Sub 
      - http://demo.ovenplayer.com/#sources=%5B%7B%22id%22%3A0%2C%22label%22%3Anull%2C%22file%22%3A%22http%3A%2F%2F${publicIp}%3A8080%2Fapp%2Fstream1%2Fmanifest_ll.mpd%22%2C%22type%22%3A%22dash%22%7D%5D&lowLatency=true&liveDelay=2
      - { publicIp: !GetAtt Server.PublicIp }
  WebRTCDemoPlayerUrl:
    Description: WebRTC Demo Player URL
    Value: !Sub     
      - http://demo.ovenplayer.com/#sources=%5B%7B%22id%22%3A1%2C%22label%22%3Anull%2C%22file%22%3A%22ws%3A%2F%2F${publicIp}%3A3333%2Fapp%2Fstream1%22%2C%22type%22%3A%22webrtc%22%7D%5D&lowLatency=true&liveDelay=2      
      - { publicIp: !GetAtt Server.PublicIp }